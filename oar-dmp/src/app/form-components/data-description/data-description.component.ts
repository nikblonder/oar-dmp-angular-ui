import { Component, Input, Output, OnInit } from '@angular/core';
//resources service to talk between two components
import { ResourcesService } from '../../shared/resources.service';
import { FormArray, FormBuilder, FormControl } from '@angular/forms';
import { defer, map, of, startWith } from 'rxjs';
import { DMP_Meta } from 'src/app/types/DMP.types';
import { DataCategories } from 'src/app/types/data-categories.type';

@Component({
  selector: 'app-data-description',
  templateUrl: './data-description.component.html',
  styleUrls: ['./data-description.component.scss']
})
export class DataDescriptionComponent implements OnInit {

  test_categories1 = new FormArray([]);
  test_categories2 = this.fb.array([]);

  availableCategories:DataCategories[]=[
    { id: 0, name: 'SRD' },
    { id: 1, name: 'Reference' },
    { id: 2, name: 'Resource' },
    { id: 3, name: 'Published' },
    { id: 4, name: 'Publishable' },
    { id: 5, name: 'Working' },
    { id: 6, name: 'Derived' },

  ]

  initialCategories: string[] = [];

  dataCategoriesMap = new Map([
    ['SRD', false],
    ['Reference', false],
    ['Resource', false],
    ['Published', false],
    ['Publishable', false],
    ['Working', false],
    ['Derived', false]
  ]);

  dataDescriptionForm = this.fb.group({
    dataDescription: [''],
    dataCategories: [[]]   

  });

  @Input()
  set initialDMP_Meta(data_description: DMP_Meta) {
    console.log("inside @ input set initialDMP_Meta");

    let dataFormGroups = data_description.dataCategories.map(cat => this.fb.group({'cat': new FormControl(cat)}));
    let dataFormArray = this.fb.array(dataFormGroups); 
    this.initialCategories = data_description.dataCategories;
    
    this.dataDescriptionForm.patchValue({
      dataDescription:                data_description.dataDescription,
      dataCategories:                 data_description.dataCategories
    });
  }

  @Output()
  valueChange = defer(() =>
    this.dataDescriptionForm.valueChanges.pipe(
      startWith(this.dataDescriptionForm.value),
      map(
        (formValue): Partial<DMP_Meta> => ({
          dataDescription:    formValue.dataDescription,
          dataCategories:     formValue.dataCategories,
        })
      )
    )
  );
  
  @Output()
  formReady = of(this.dataDescriptionForm); 

  constructor(
    //resources service to talk between two components 
    // (DataDescriptionComponent and ResourceOptionsComponent)
    private sharedService: ResourcesService,
    private fb: FormBuilder
  ) { }

  ngOnInit(): void {   
    for (let category of this.initialCategories) {
      // console.log(category); 
      // console.log(this.dataCategories.get(category));
      // this.dataCategoriesMap.set(category,true);
      this.setStorageTier(category,true);
    }
  }

  /**
   * This function implements logic of creating storage tiers based on users selection of 
   * categories of the data that will be generated by a DMP. This is based on the selection
   * of checkboxes in the "Data Description" section of DMP user interface.
   * It also fires off messages to resource options to correctly highlight suggestions
   * in the "Storage" section of the resources panel.
   * @param category 
   * @param checked 
   */

  setStorageTier(category:string,checked:boolean){
    var storageTier: string = "";
    this.dataCategoriesMap.set(category,checked)
    console.log(this.dataCategoriesMap)

    // Go through possibilities with tiers based on check box selections
    for (let entry of this.dataCategoriesMap.entries()){
      console.log(entry[0], entry[1]);
      if (entry[0] === "SRD" || entry[0] === "Reference" || entry[0] === "Resource" ){
        if(entry[1]){
            storageTier = "top";
            break;
        }
      }
      else if (entry[0] === "Published" || entry[0] === "Publishable" ){
        if(entry[1]){
            storageTier = "mid";
            break;
        }
      }
      else if (entry[0] === "Working" || entry[0] === "Derived" ){
        if(entry[1]){
            storageTier = "low";
            break;
        }
      }
    }   
    
    this.sharedService.setStorageMessage(storageTier);
    this.sharedService.storageSubject$.next(storageTier);

  }

  dataCategoryChange(e:any) {
    this.setStorageTier(e.target.defaultValue,e.target.checked);
    
    
    let dataCategories = this.dataDescriptionForm.value['dataCategories'] as string[];

    if (e.target.checked){
      console.log(e.target.defaultValue + " checked");  
      
      dataCategories.push(e.target.defaultValue);
    }
    else{
      console.log(e.target.defaultValue + " unchecked");      
      dataCategories.forEach((value,index)=>{
        if(value === e.target.defaultValue) 
          dataCategories.splice(index,1)
        });
    }

  }

}
